/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/marked-highlight@2.1.1/src/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
function t(t) { if ("function" == typeof t && (t = { highlight: t }), !t || "function" != typeof t.highlight) throw new Error("Must provide highlight function"); return "string" != typeof t.langPrefix && (t.langPrefix = "language-"), { async: !!t.async, walkTokens(r) { if ("code" !== r.type) return; const i = e(r.lang); if (t.async) return Promise.resolve(t.highlight(r.text, i, r.lang || "")).then(n(r)); const o = t.highlight(r.text, i, r.lang || ""); if (o instanceof Promise) throw new Error("markedHighlight is not set to async but the highlight function is async. Set the async option to true on markedHighlight to await the async highlight function."); n(r)(o) }, renderer: { code(n, r, i) { const o = e(r), c = o ? ` class="${t.langPrefix}${a(o)}"` : ""; return n = n.replace(/\n$/, ""), `<pre><code${c}>${i ? n : a(n, !0)}\n</code></pre>` } } } } function e(t) { return (t || "").match(/\S*/)[0] } function n(t) { return e => { "string" == typeof e && e !== t.text && (t.escaped = !0, t.text = e) } } const r = /[&<>"']/, i = new RegExp(r.source, "g"), o = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, c = new RegExp(o.source, "g"), g = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }, h = t => g[t]; function a(t, e) { if (e) { if (r.test(t)) return t.replace(i, h) } else if (o.test(t)) return t.replace(c, h); return t } export { t as markedHighlight }; export default null;
//# sourceMappingURL=/sm/575ab93c22cfa119d95a7c352a288e6cefea6316637cecc3aa2fb3b71968caf6.map